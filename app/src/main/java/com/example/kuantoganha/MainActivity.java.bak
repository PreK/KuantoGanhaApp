    package com.example.kuantoganha;

    import android.content.Intent;
    import android.content.SharedPreferences;
    import android.os.Bundle;
    import android.preference.PreferenceManager;
    import android.util.Log;
    import android.view.Menu;
    import android.view.MenuItem;
    import android.view.View;
    import android.widget.Button;
    import android.widget.CheckBox;
    import android.widget.EditText;
    import android.widget.Toast;

    import androidx.appcompat.app.AppCompatActivity;

    import com.android.volley.AuthFailureError;
    import com.android.volley.Request;
    import com.android.volley.RequestQueue;
    import com.android.volley.Response;
    import com.android.volley.toolbox.JsonObjectRequest;
    import com.android.volley.toolbox.Volley;

    import org.json.JSONException;
    import org.json.JSONObject;

    import java.nio.charset.StandardCharsets;
    import java.util.HashMap;
    import java.util.Map;

    public class MainActivity extends BaseActivity {

        private EditText editTextUsername, editTextPassword;
        private Button btnLogin;
        private CheckBox checkBoxSave;


        @Override
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_main);

            // Check if user is already logged in
            checkLoginStatus();

            // Initialize UI components
            initializeUI();
        }

        private void initializeUI() {
            editTextUsername = findViewById(R.id.editTextLogin);
            editTextPassword = findViewById(R.id.editTextPassword);
            btnLogin = findViewById(R.id.buttonLogin);
            checkBoxSave = findViewById(R.id.checkBoxSave);

            btnLogin.setOnClickListener(v -> attemptLogin());
        }

        private void checkLoginStatus() {
            SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);
            if (preferences.getBoolean("saveLogin", false)) {
                navigateToUserActivity();
            }
        }

        private void attemptLogin() {
            String username = editTextUsername.getText().toString().trim();
            String password = editTextPassword.getText().toString().trim();

            if (username.isEmpty() || password.isEmpty()) {
                Toast.makeText(this, "Please fill in all fields", Toast.LENGTH_SHORT).show();
            } else {
                loginUser(username, password);
            }
        }

        private void loginUser(String username, String password) {
            RequestQueue queue = Volley.newRequestQueue(this);
            String url = Config.url;

            JSONObject postData = new JSONObject();
            try {
                postData.put("username", username);
                postData.put("password", password);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.POST, url, postData,
                    this::handleLoginResponse,
                    error -> Toast.makeText(this, "Network Error: " + error.toString(), Toast.LENGTH_SHORT).show()) {
                @Override
                public Map<String, String> getHeaders() throws AuthFailureError {
                    Map<String, String> params = new HashMap<>();
                    params.put("Content-Type", "application/json; charset=UTF-8");
                    return params;
                }
            };
            queue.add(jsonObjectRequest);
        }

        private void handleLoginResponse(JSONObject response) {
            try {
                boolean success = response.getBoolean("success");
                String message = response.getString("message");
                Log.d("Login", "handleLoginResponse: " + success + " " + message);
                if (success) {
                    if (checkBoxSave.isChecked()) {
                        saveLoginPreference();
                    }
                    navigateToUserActivity();
                } else {
                    Toast.makeText(this, "Login Failed: " + message, Toast.LENGTH_SHORT).show();
                }
            } catch (JSONException e) {
                e.printStackTrace();
                Toast.makeText(this, "JSON Parsing Error", Toast.LENGTH_SHORT).show();
            }
        }

        private void saveLoginPreference() {
            SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);
            SharedPreferences.Editor editor = preferences.edit();
            editor.putBoolean("saveLogin", true);
            editor.apply();
        }

        private void navigateToUserActivity() {
            Intent intent = new Intent(this, UserActivity.class);
            startActivity(intent);
            finish();
        }

    }


